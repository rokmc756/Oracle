---
- name: Create .bash_history If Not Exist
  become_user: "{{ sudo_user }}"
  copy:
    dest: ~/.bash_history
    content: ""
    force: no


- name: Add Sudo Line to Bash History
  become_user: "{{ sudo_user }}"
  lineinfile:
    dest: ~/.bash_history
    line: "sudo /bin/bash --login"
    state: present


- name: Check .ssh Local Directory Exists
  become_user: "{{ sudo_user }}"
  stat:
    path: ~/.ssh
  register: ssh_user_directory_exists_check


- name: Create ~/.ssh Directory in "{{ sudo_user }}" User Home Directory
  become_user: "{{ sudo_user }}"
  file:
    path: "~/.ssh"
    state: directory
    mode: "0700"
    owner: "{{ sudo_user }}"
    group: "{{ sudo_group }}"
  register: ssh_user_directory_creation
  when: ssh_user_directory_exists_check is defined and ssh_user_directory_exists_check.stat.exists == false


- name: Check .ssh Key File Exists
  become_user: "{{ sudo_user }}"
  stat:
    path: "~/.ssh/{{ item }}"
  register: ssh_user_key_file_exists_check
  with_items:
    - "{{ ssh_key_filename }}"
    - "{{ ssh_key_filename }}.pub"


- name: Adding the Fingerprint
  become_user: "{{ sudo_user }}"
  shell: "ssh-keyscan -t rsa {{ item }} >> ~/.ssh/known_hosts"
  register: ssh_user_fingerprint_add
  with_items:
    - "{{ groups['all'] }}"


- name: Generate SSH Key of "{{ sudo_user }}" User on Local Machine
  become_user: "{{ sudo_user }}"
  shell: "/usr/bin/ssh-keygen -t rsa -f ~/.ssh/{{ssh_key_filename}} -P ''"
  register: ssh_user_key_creation
  when:
    - ssh_user_key_file_exists_check is defined and ssh_user_key_file_exists_check.results[0].stat.exists == false and ssh_user_key_file_exists_check.results[1].stat.exists == false
  failed_when: ssh_user_key_creation.rc != 0


- name: Distribute the SSH Key of "{{ sudo_user }}" User to the Remote Hosts
  become_user: "{{ sudo_user }}"
  shell: "sshpass -p \"{{sudo_user_pass}}\" ssh-copy-id -i ~/.ssh/{{ ssh_key_filename }}.pub \"{{ sudo_user }}@{{ item }}\""
  register: ssh_copy_user_id_execution
  with_items:
    - "{{ groups['all'] }}"
  failed_when:
    - ssh_copy_user_id_execution.rc != 0


- name: Add User to "{{ wheel_group }}" Group
  shell: usermod -aG "{{ wheel_group }}" "{{ sudo_user }}"
  args:
    executable: /bin/bash
  when: ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS' or ansible_distribution == 'Rocky'


- name: Add User to "{{ wheel_group }}" Group
  shell: usermod -aG "sudo" "{{ sudo_user }}"
  args:
    executable: /bin/bash
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


- name: Check SSH to Remote Hosts Works
  become_user: "{{ sudo_user }}"
  shell: "hostname; id"
  register: ssh_connection_test
  failed_when: ssh_connection_test.rc != 0


- name: Print the Connectivity Test Results
  become_user: "{{ sudo_user }}"
  debug:
    var: ssh_connection_test.stdout_lines


- name: Copy Sudo User SSH Key from Local to All Hosts
  become_user: "{{ local_sudo_user }}"
  shell: |
    sshpass -p "changeme" ssh-copy-id -f -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa.pub {{ sudo_user }}@{{ hostvars[item][_netdev]['ipv4']['address'] }}
  register: ssh_copy_id_keys
  with_items: "{{ groups['all'] }}"
  delegate_to: localhost
  failed_when: ssh_copy_id_keys.rc != 0
  when: inventory_hostname in hostvars[groups['all'][0]].ansible_hostname

